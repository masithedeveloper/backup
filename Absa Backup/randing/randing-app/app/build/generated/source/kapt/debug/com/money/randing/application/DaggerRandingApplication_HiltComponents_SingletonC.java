// Generated by Dagger (https://dagger.dev).
package com.money.randing.application;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.money.randing.data.db.AppDatabase;
import com.money.randing.data.db.dao.MovementDao;
import com.money.randing.data.db.dao.PersonDao;
import com.money.randing.di.AppModule;
import com.money.randing.di.AppModule_ProvideDatabaseFactory;
import com.money.randing.di.AppModule_ProvideMovementDaoFactory;
import com.money.randing.di.AppModule_ProvidePersonDaoFactory;
import com.money.randing.domain.repository.movement.MovementRepositoryImpl;
import com.money.randing.domain.repository.person.PersonRepositoryImpl;
import com.money.randing.ui.MainActivity;
import com.money.randing.ui.chart.ChartFragment;
import com.money.randing.ui.chart.ChartViewModel;
import com.money.randing.ui.chart.ChartViewModel_HiltModules_KeyModule_ProvideFactory;
import com.money.randing.ui.home.HomeFragment;
import com.money.randing.ui.home.HomeViewModel;
import com.money.randing.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.money.randing.ui.movement.create.CreateMovementFragment;
import com.money.randing.ui.movement.create.CreateMovementViewModel;
import com.money.randing.ui.movement.create.CreateMovementViewModel_HiltModules_KeyModule_ProvideFactory;
import com.money.randing.ui.movement.person_search.PersonSearchFragment;
import com.money.randing.ui.movement.person_search.PersonSearchViewModel;
import com.money.randing.ui.movement.person_search.PersonSearchViewModel_HiltModules_KeyModule_ProvideFactory;
import com.money.randing.ui.people.create.CreatePersonFragment;
import com.money.randing.ui.people.create.CreatePersonViewModel;
import com.money.randing.ui.people.create.CreatePersonViewModel_HiltModules_KeyModule_ProvideFactory;
import com.money.randing.ui.people.detail.PersonDetailFragment;
import com.money.randing.ui.people.detail.PersonDetailViewModel;
import com.money.randing.ui.people.detail.PersonDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.money.randing.ui.people.home.PeopleFragment;
import com.money.randing.ui.people.home.PeopleViewModel;
import com.money.randing.ui.people.home.PeopleViewModel_HiltModules_KeyModule_ProvideFactory;
import com.money.randing.ui.summary.SummaryFragment;
import com.money.randing.ui.summary.SummaryViewModel;
import com.money.randing.ui.summary.SummaryViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRandingApplication_HiltComponents_SingletonC extends RandingApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object appDatabase = new MemoizedSentinel();

  private volatile Object personDao = new MemoizedSentinel();

  private volatile Object movementDao = new MemoizedSentinel();

  private DaggerRandingApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private AppDatabase appDatabase() {
    Object local = appDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appDatabase;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          appDatabase = DoubleCheck.reentrantCheck(appDatabase, local);
        }
      }
    }
    return (AppDatabase) local;
  }

  private PersonDao personDao() {
    Object local = personDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = personDao;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvidePersonDaoFactory.providePersonDao(appDatabase());
          personDao = DoubleCheck.reentrantCheck(personDao, local);
        }
      }
    }
    return (PersonDao) local;
  }

  private MovementDao movementDao() {
    Object local = movementDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movementDao;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideMovementDaoFactory.provideMovementDao(appDatabase());
          movementDao = DoubleCheck.reentrantCheck(movementDao, local);
        }
      }
    }
    return (MovementDao) local;
  }

  private PersonRepositoryImpl personRepositoryImpl() {
    return new PersonRepositoryImpl(personDao(), movementDao());
  }

  private MovementRepositoryImpl movementRepositoryImpl() {
    return new MovementRepositoryImpl(movementDao());
  }

  @Override
  public void injectRandingApplication(RandingApplication randingApplication) {
  }

  @Override
  public void injectSummaryWidgetProvider(SummaryWidgetProvider summaryWidgetProvider) {
    injectSummaryWidgetProvider2(summaryWidgetProvider);
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  private SummaryWidgetProvider injectSummaryWidgetProvider2(SummaryWidgetProvider instance) {
    SummaryWidgetProvider_MembersInjector.injectRepository(instance, personRepositoryImpl());
    return instance;
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public RandingApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerRandingApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements RandingApplication_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public RandingApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends RandingApplication_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements RandingApplication_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public RandingApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends RandingApplication_HiltComponents.ActivityC {
      private final Activity activity;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerRandingApplication_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerRandingApplication_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(8).add(ChartViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CreateMovementViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CreatePersonViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PeopleViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PersonDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PersonSearchViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SummaryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements RandingApplication_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public RandingApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends RandingApplication_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerRandingApplication_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
        }

        @Override
        public void injectChartFragment(ChartFragment chartFragment) {
        }

        @Override
        public void injectHomeFragment(HomeFragment homeFragment) {
        }

        @Override
        public void injectCreateMovementFragment(CreateMovementFragment createMovementFragment) {
        }

        @Override
        public void injectPersonSearchFragment(PersonSearchFragment personSearchFragment) {
        }

        @Override
        public void injectCreatePersonFragment(CreatePersonFragment createPersonFragment) {
        }

        @Override
        public void injectPersonDetailFragment(PersonDetailFragment personDetailFragment) {
        }

        @Override
        public void injectPeopleFragment(PeopleFragment peopleFragment) {
        }

        @Override
        public void injectSummaryFragment(SummaryFragment summaryFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerRandingApplication_HiltComponents_SingletonC.this.applicationContextModule), ActivityCImpl.this.getViewModelKeys(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements RandingApplication_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public RandingApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends RandingApplication_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements RandingApplication_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public RandingApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends RandingApplication_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements RandingApplication_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public RandingApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends RandingApplication_HiltComponents.ViewModelC {
      private volatile Provider<ChartViewModel> chartViewModelProvider;

      private volatile Provider<CreateMovementViewModel> createMovementViewModelProvider;

      private volatile Provider<CreatePersonViewModel> createPersonViewModelProvider;

      private volatile Provider<HomeViewModel> homeViewModelProvider;

      private volatile Provider<PeopleViewModel> peopleViewModelProvider;

      private volatile Provider<PersonDetailViewModel> personDetailViewModelProvider;

      private volatile Provider<PersonSearchViewModel> personSearchViewModelProvider;

      private volatile Provider<SummaryViewModel> summaryViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private ChartViewModel chartViewModel() {
        return new ChartViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.movementRepositoryImpl());
      }

      private Provider<ChartViewModel> chartViewModelProvider() {
        Object local = chartViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          chartViewModelProvider = (Provider<ChartViewModel>) local;
        }
        return (Provider<ChartViewModel>) local;
      }

      private CreateMovementViewModel createMovementViewModel() {
        return new CreateMovementViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.movementRepositoryImpl());
      }

      private Provider<CreateMovementViewModel> createMovementViewModelProvider() {
        Object local = createMovementViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          createMovementViewModelProvider = (Provider<CreateMovementViewModel>) local;
        }
        return (Provider<CreateMovementViewModel>) local;
      }

      private CreatePersonViewModel createPersonViewModel() {
        return new CreatePersonViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.personRepositoryImpl());
      }

      private Provider<CreatePersonViewModel> createPersonViewModelProvider() {
        Object local = createPersonViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          createPersonViewModelProvider = (Provider<CreatePersonViewModel>) local;
        }
        return (Provider<CreatePersonViewModel>) local;
      }

      private HomeViewModel homeViewModel() {
        return new HomeViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.movementRepositoryImpl());
      }

      private Provider<HomeViewModel> homeViewModelProvider() {
        Object local = homeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          homeViewModelProvider = (Provider<HomeViewModel>) local;
        }
        return (Provider<HomeViewModel>) local;
      }

      private PeopleViewModel peopleViewModel() {
        return new PeopleViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.personRepositoryImpl());
      }

      private Provider<PeopleViewModel> peopleViewModelProvider() {
        Object local = peopleViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(4);
          peopleViewModelProvider = (Provider<PeopleViewModel>) local;
        }
        return (Provider<PeopleViewModel>) local;
      }

      private PersonDetailViewModel personDetailViewModel() {
        return new PersonDetailViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.personRepositoryImpl(), DaggerRandingApplication_HiltComponents_SingletonC.this.movementRepositoryImpl());
      }

      private Provider<PersonDetailViewModel> personDetailViewModelProvider() {
        Object local = personDetailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(5);
          personDetailViewModelProvider = (Provider<PersonDetailViewModel>) local;
        }
        return (Provider<PersonDetailViewModel>) local;
      }

      private PersonSearchViewModel personSearchViewModel() {
        return new PersonSearchViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.personRepositoryImpl());
      }

      private Provider<PersonSearchViewModel> personSearchViewModelProvider() {
        Object local = personSearchViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(6);
          personSearchViewModelProvider = (Provider<PersonSearchViewModel>) local;
        }
        return (Provider<PersonSearchViewModel>) local;
      }

      private SummaryViewModel summaryViewModel() {
        return new SummaryViewModel(DaggerRandingApplication_HiltComponents_SingletonC.this.personRepositoryImpl());
      }

      private Provider<SummaryViewModel> summaryViewModelProvider() {
        Object local = summaryViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(7);
          summaryViewModelProvider = (Provider<SummaryViewModel>) local;
        }
        return (Provider<SummaryViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(8).put("com.money.randing.ui.chart.ChartViewModel", (Provider) chartViewModelProvider()).put("com.money.randing.ui.movement.create.CreateMovementViewModel", (Provider) createMovementViewModelProvider()).put("com.money.randing.ui.people.create.CreatePersonViewModel", (Provider) createPersonViewModelProvider()).put("com.money.randing.ui.home.HomeViewModel", (Provider) homeViewModelProvider()).put("com.money.randing.ui.people.home.PeopleViewModel", (Provider) peopleViewModelProvider()).put("com.money.randing.ui.people.detail.PersonDetailViewModel", (Provider) personDetailViewModelProvider()).put("com.money.randing.ui.movement.person_search.PersonSearchViewModel", (Provider) personSearchViewModelProvider()).put("com.money.randing.ui.summary.SummaryViewModel", (Provider) summaryViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.money.randing.ui.chart.ChartViewModel 
            return (T) ViewModelCImpl.this.chartViewModel();

            case 1: // com.money.randing.ui.movement.create.CreateMovementViewModel 
            return (T) ViewModelCImpl.this.createMovementViewModel();

            case 2: // com.money.randing.ui.people.create.CreatePersonViewModel 
            return (T) ViewModelCImpl.this.createPersonViewModel();

            case 3: // com.money.randing.ui.home.HomeViewModel 
            return (T) ViewModelCImpl.this.homeViewModel();

            case 4: // com.money.randing.ui.people.home.PeopleViewModel 
            return (T) ViewModelCImpl.this.peopleViewModel();

            case 5: // com.money.randing.ui.people.detail.PersonDetailViewModel 
            return (T) ViewModelCImpl.this.personDetailViewModel();

            case 6: // com.money.randing.ui.movement.person_search.PersonSearchViewModel 
            return (T) ViewModelCImpl.this.personSearchViewModel();

            case 7: // com.money.randing.ui.summary.SummaryViewModel 
            return (T) ViewModelCImpl.this.summaryViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements RandingApplication_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public RandingApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends RandingApplication_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
